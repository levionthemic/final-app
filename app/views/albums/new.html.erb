<div class="bg-white p-4 m-4" style="min-height: 90vh;">
  <h3 class="mb-4 border-bottom pb-2">New Album</h3>
  <%= form_with url: user_albums_path(@user_id), local: true, html: { enctype: "multipart/form-data" } do |f| %>
    <div class="row mb-3">
      <div class="col-md-6">
        <%= f.label :title, "Title", class: "form-label" %>
        <%= f.text_field :title, placeholder: "Photo Title", class: "form-control" %>
      </div>
      <div class="col-md-6">
        <%= f.label :description, "Description", class: "form-label" %>
        <%= f.text_area :description, placeholder: "Photo Description", class: "form-control", rows: 3 %>
      </div>
    </div>
    <div class="mb-3 col-md-4">
      <%= f.label :sharing_mode, "Sharing mode", class: "form-label" %>
      <%= f.select :sharing_mode, Photo.sharing_modes.keys.map { |mode| [mode.titleize, mode] }, {}, class: "form-select" %>
    </div>
    <div class="mb-4 d-flex align-items-center gap-2 flex-wrap image-preview-list">

      <label class="overflow-hidden d-flex align-items-center justify-content-center rounded" style="width: 150px; height: 150px; cursor: pointer; border: 2px dashed #bDbdbd; background-color: #f2f2f2">
        <span class="fs-1 text-muted">+</span>
        <%= f.file_field :image, class: "d-none", id: "image-upload" %>
      </label>
    </div>
    <%= f.submit "Save", class: "btn btn-success" %>
  <% end %>
</div>

<style>
    .image-preview {
        width: 150px;
        height: 150px;
        display: none;
    }
</style>

<script>
    document.addEventListener("turbo:load", () => {
        const inputUpload = document.querySelector('#image-upload')
        const imagePreviewList = document.querySelector('.image-preview-list')

        if (inputUpload) {
            inputUpload.addEventListener('change', () => {
                const file = inputUpload.files[0]
                if (file) {
                    const reader = new FileReader()
                    const imagePreview = document.createElement('img')
                    reader.onload = (e) => {
                        imagePreview.classList.add('image-preview', 'rounded', 'object-cover')
                        imagePreview.src = e.target.result
                        imagePreview.style.display = 'block'
                    }
                    imagePreviewList.insertBefore(imagePreview, inputUpload.parentElement)

                    reader.readAsDataURL(file)
                }
            })
        }
    })
</script>
